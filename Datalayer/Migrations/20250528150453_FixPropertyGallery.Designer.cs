// <auto-generated />
using System;
using DataLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataLayer.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250528150453_FixPropertyGallery")]
    partial class FixPropertyGallery
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataLayer.Agency", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<string>("agency_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("city_id")
                        .HasColumnType("bigint");

                    b.Property<string>("city_province_full_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("full_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("mobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("slug")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("datetime2");

                    b.Property<long>("user_id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("city_id");

                    b.HasIndex("slug")
                        .IsUnique();

                    b.ToTable("Agency");
                });

            modelBuilder.Entity("DataLayer.BlacklistedToken", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<DateTime>("black_listed_on")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("expiry_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("slug")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("slug")
                        .IsUnique();

                    b.ToTable("BlacklistedToken");
                });

            modelBuilder.Entity("DataLayer.Blog", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<long>("blog_category_id")
                        .HasColumnType("bigint");

                    b.Property<string>("blog_text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("image_alt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("keywords")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("show_blog")
                        .HasColumnType("bit");

                    b.Property<string>("slug")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("blog_category_id");

                    b.HasIndex("slug")
                        .IsUnique();

                    b.ToTable("Blog");
                });

            modelBuilder.Entity("DataLayer.BlogCategory", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("slug")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("slug")
                        .IsUnique();

                    b.ToTable("BlogCategory");
                });

            modelBuilder.Entity("DataLayer.City", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("province_id")
                        .HasColumnType("bigint");

                    b.Property<string>("slug")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("province_id");

                    b.HasIndex("slug")
                        .IsUnique();

                    b.ToTable("City");

                    b.HasData(
                        new
                        {
                            id = 1L,
                            created_at = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            name = "ساری",
                            province_id = 1L,
                            slug = "ساری",
                            updated_at = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            id = 2L,
                            created_at = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            name = "بابل",
                            province_id = 1L,
                            slug = "بابل",
                            updated_at = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            id = 3L,
                            created_at = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            name = "آمل",
                            province_id = 1L,
                            slug = "آمل",
                            updated_at = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            id = 4L,
                            created_at = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            name = "قائمشهر",
                            province_id = 1L,
                            slug = "قائمشهر",
                            updated_at = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            id = 5L,
                            created_at = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            name = "تنکابن",
                            province_id = 1L,
                            slug = "تنکابن",
                            updated_at = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            id = 6L,
                            created_at = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            name = "نوشهر",
                            province_id = 1L,
                            slug = "نوشهر",
                            updated_at = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            id = 7L,
                            created_at = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            name = "چالوس",
                            province_id = 1L,
                            slug = "چالوس",
                            updated_at = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            id = 8L,
                            created_at = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            name = "نور",
                            province_id = 1L,
                            slug = "نور",
                            updated_at = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            id = 9L,
                            created_at = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            name = "جویبار",
                            province_id = 1L,
                            slug = "جویبار",
                            updated_at = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            id = 10L,
                            created_at = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            name = "رامسر",
                            province_id = 1L,
                            slug = "رامسر",
                            updated_at = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            id = 11L,
                            created_at = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            name = "بهشهر",
                            province_id = 1L,
                            slug = "بهشهر",
                            updated_at = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            id = 12L,
                            created_at = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            name = "سوادکوه",
                            province_id = 1L,
                            slug = "سوادکوه",
                            updated_at = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            id = 13L,
                            created_at = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            name = "عباس‌آباد",
                            province_id = 1L,
                            slug = "عباس-آباد",
                            updated_at = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            id = 14L,
                            created_at = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            name = "فریدونکنار",
                            province_id = 1L,
                            slug = "فریدونکنار",
                            updated_at = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            id = 15L,
                            created_at = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            name = "محمودآباد",
                            province_id = 1L,
                            slug = "محمودآباد",
                            updated_at = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            id = 16L,
                            created_at = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            name = "نکا",
                            province_id = 1L,
                            slug = "نكا",
                            updated_at = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            id = 17L,
                            created_at = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            name = "سیمرغ",
                            province_id = 1L,
                            slug = "سیمرغ",
                            updated_at = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            id = 18L,
                            created_at = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            name = "گلوگاه",
                            province_id = 1L,
                            slug = "گلوگاه",
                            updated_at = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            id = 19L,
                            created_at = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            name = "شهمیرزاد",
                            province_id = 1L,
                            slug = "شهمیرزاد",
                            updated_at = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            id = 20L,
                            created_at = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            name = "کجور",
                            province_id = 1L,
                            slug = "کجور",
                            updated_at = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            id = 21L,
                            created_at = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            name = "کلاردشت",
                            province_id = 1L,
                            slug = "کلاردشت",
                            updated_at = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            id = 22L,
                            created_at = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            name = "املش",
                            province_id = 1L,
                            slug = "املش",
                            updated_at = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            id = 23L,
                            created_at = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            name = "میاندورود",
                            province_id = 1L,
                            slug = "میاندورود",
                            updated_at = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("DataLayer.Option", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("option_key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("option_value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("slug")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("slug")
                        .IsUnique();

                    b.ToTable("Option");

                    b.HasData(
                        new
                        {
                            id = 1L,
                            created_at = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            option_key = "AdminMobile",
                            option_value = "09301724389",
                            slug = "AdminMobile",
                            updated_at = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("DataLayer.Order", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<long>("amount")
                        .HasColumnType("bigint");

                    b.Property<string>("authority")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("card_number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("date_paid")
                        .HasColumnType("datetime2");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("mobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("order_status")
                        .HasColumnType("int");

                    b.Property<long>("plan_id")
                        .HasColumnType("bigint");

                    b.Property<string>("ref_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("response_message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("slug")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("datetime2");

                    b.Property<long>("user_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("userid")
                        .HasColumnType("bigint");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("plan_id");

                    b.HasIndex("slug")
                        .IsUnique();

                    b.HasIndex("userid");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("DataLayer.Otp", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("expiry_date")
                        .HasColumnType("datetime2");

                    b.Property<int>("otp_code")
                        .HasColumnType("int");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("slug")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("slug")
                        .IsUnique();

                    b.ToTable("Otp");
                });

            modelBuilder.Entity("DataLayer.Plan", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("plan_months")
                        .HasColumnType("int");

                    b.Property<decimal>("price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("property_count")
                        .HasColumnType("int");

                    b.Property<string>("slug")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("slug")
                        .IsUnique();

                    b.ToTable("Plan");
                });

            modelBuilder.Entity("DataLayer.Property", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("bed_room_count")
                        .HasColumnType("int");

                    b.Property<long>("category_id")
                        .HasColumnType("bigint");

                    b.Property<long>("city_id")
                        .HasColumnType("bigint");

                    b.Property<string>("city_province_full_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("is_active")
                        .HasColumnType("bit");

                    b.Property<bool>("is_for_sale")
                        .HasColumnType("bit");

                    b.Property<decimal>("meterage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("mortgage_price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("owner_id")
                        .HasColumnType("bigint");

                    b.Property<int>("property_age")
                        .HasColumnType("int");

                    b.Property<int>("property_floor")
                        .HasColumnType("int");

                    b.Property<decimal?>("rent_price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("sell_price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("situation_id")
                        .HasColumnType("bigint");

                    b.Property<string>("slug")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("state_enum")
                        .HasColumnType("int");

                    b.Property<int>("type_enum")
                        .HasColumnType("int");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("video")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("video_caption")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("category_id");

                    b.HasIndex("city_id");

                    b.HasIndex("owner_id");

                    b.HasIndex("situation_id");

                    b.HasIndex("slug")
                        .IsUnique();

                    b.ToTable("Property");
                });

            modelBuilder.Entity("DataLayer.PropertyCategory", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("slug")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("slug")
                        .IsUnique();

                    b.ToTable("PropertyCategory");
                });

            modelBuilder.Entity("DataLayer.PropertyFacility", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("slug")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("slug")
                        .IsUnique();

                    b.ToTable("PropertyFacility");
                });

            modelBuilder.Entity("DataLayer.PropertyFacilityProperty", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<long>("property_facility_id")
                        .HasColumnType("bigint");

                    b.Property<long>("property_id")
                        .HasColumnType("bigint");

                    b.Property<string>("slug")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("property_facility_id");

                    b.HasIndex("property_id");

                    b.HasIndex("slug")
                        .IsUnique();

                    b.ToTable("PropertyFacilityProperty");
                });

            modelBuilder.Entity("DataLayer.PropertyGallery", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<string>("alt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("picture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("property_id")
                        .HasColumnType("bigint");

                    b.Property<string>("slug")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("datetime2");

                    b.Property<long>("user_id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("property_id");

                    b.HasIndex("slug")
                        .IsUnique();

                    b.HasIndex("user_id");

                    b.ToTable("PropertyGallery");
                });

            modelBuilder.Entity("DataLayer.PropertySituation", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("slug")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("slug")
                        .IsUnique();

                    b.ToTable("PropertySituation");
                });

            modelBuilder.Entity("DataLayer.Province", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("slug")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("slug")
                        .IsUnique();

                    b.ToTable("Province");

                    b.HasData(
                        new
                        {
                            id = 1L,
                            created_at = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            name = "مازندران",
                            slug = "مازندران",
                            updated_at = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("DataLayer.Role", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("slug")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("slug")
                        .IsUnique();

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            id = 1L,
                            created_at = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            slug = "Admin_Role",
                            title = "Admin",
                            updated_at = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            id = 2L,
                            created_at = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            slug = "Customer_Role",
                            title = "Customer",
                            updated_at = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            id = 3L,
                            created_at = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            slug = "Main_Admin_Role",
                            title = "MainAdmin",
                            updated_at = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("DataLayer.Ticket", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<bool>("is_admin")
                        .HasColumnType("bit");

                    b.Property<string>("message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("slug")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<string>("subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ticket_code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("datetime2");

                    b.Property<long>("user_id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("slug")
                        .IsUnique();

                    b.HasIndex("user_id");

                    b.ToTable("Ticket");
                });

            modelBuilder.Entity("DataLayer.TicketReply", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<bool>("is_admin")
                        .HasColumnType("bit");

                    b.Property<string>("message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("slug")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<long>("ticket_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("datetime2");

                    b.Property<long>("user_id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("slug")
                        .IsUnique();

                    b.HasIndex("ticket_id");

                    b.HasIndex("user_id");

                    b.ToTable("TicketReply");
                });

            modelBuilder.Entity("DataLayer.User", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<long?>("agency_id")
                        .HasColumnType("bigint");

                    b.Property<string>("concurrency_stamp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("expire_date")
                        .HasColumnType("datetime2");

                    b.Property<int>("failed_login_count")
                        .HasColumnType("int");

                    b.Property<bool>("is_active")
                        .HasColumnType("bit");

                    b.Property<bool>("is_agency")
                        .HasColumnType("bit");

                    b.Property<bool>("is_delete_able")
                        .HasColumnType("bit");

                    b.Property<bool>("is_licensed")
                        .HasColumnType("bit");

                    b.Property<bool>("is_locked_out")
                        .HasColumnType("bit");

                    b.Property<bool>("is_mobile_confirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("last_login_date_time")
                        .HasColumnType("datetime2");

                    b.Property<string>("license")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("lock_out_end_time")
                        .HasColumnType("datetime2");

                    b.Property<string>("mobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password_hash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("plan_id")
                        .HasColumnType("bigint");

                    b.Property<int>("property_count")
                        .HasColumnType("int");

                    b.Property<string>("refresh_token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("refresh_token_expiry_time")
                        .HasColumnType("datetime2");

                    b.Property<string>("security_stamp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("slug")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("user_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("agency_id")
                        .IsUnique()
                        .HasFilter("[agency_id] IS NOT NULL");

                    b.HasIndex("plan_id");

                    b.HasIndex("slug")
                        .IsUnique();

                    b.HasIndex("user_name")
                        .IsUnique();

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            id = 1L,
                            concurrency_stamp = "X3JO2EOCURAEBU6HHY6OBYEDD2877FXU",
                            created_at = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            email = "info@amajpanah.com",
                            expire_date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            failed_login_count = 0,
                            is_active = true,
                            is_agency = false,
                            is_delete_able = false,
                            is_licensed = false,
                            is_locked_out = false,
                            is_mobile_confirmed = false,
                            mobile = "09309309393",
                            password_hash = "omTtMfA5EEJCzjH5t/Q67cRXK5TRwerSqN7sJSm41No=.FRLmTm9jwMcEFnjpjgivJw==",
                            property_count = 0,
                            refresh_token_expiry_time = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            security_stamp = "098NTB7E5LFFXREHBSEHDKLI0DOBIKST",
                            slug = "Admin-User",
                            updated_at = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            user_name = "admin-user"
                        });
                });

            modelBuilder.Entity("DataLayer.UserRole", b =>
                {
                    b.Property<long>("user_id")
                        .HasColumnType("bigint");

                    b.Property<long>("role_id")
                        .HasColumnType("bigint");

                    b.Property<long>("id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("slug")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("datetime2");

                    b.HasKey("user_id", "role_id", "id");

                    b.HasIndex("role_id");

                    b.HasIndex("slug")
                        .IsUnique();

                    b.ToTable("UserRole");

                    b.HasData(
                        new
                        {
                            user_id = 1L,
                            role_id = 3L,
                            id = 0L,
                            created_at = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            slug = "Main-Admin-User",
                            updated_at = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("DataLayer.Agency", b =>
                {
                    b.HasOne("DataLayer.City", "city")
                        .WithMany("agency_list")
                        .HasForeignKey("city_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("city");
                });

            modelBuilder.Entity("DataLayer.Blog", b =>
                {
                    b.HasOne("DataLayer.BlogCategory", "blog_category")
                        .WithMany("blogs")
                        .HasForeignKey("blog_category_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("blog_category");
                });

            modelBuilder.Entity("DataLayer.City", b =>
                {
                    b.HasOne("DataLayer.Province", "province")
                        .WithMany("cities")
                        .HasForeignKey("province_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("province");
                });

            modelBuilder.Entity("DataLayer.Order", b =>
                {
                    b.HasOne("DataLayer.Plan", "plan")
                        .WithMany("orders")
                        .HasForeignKey("plan_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataLayer.User", "user")
                        .WithMany()
                        .HasForeignKey("userid");

                    b.Navigation("plan");

                    b.Navigation("user");
                });

            modelBuilder.Entity("DataLayer.Property", b =>
                {
                    b.HasOne("DataLayer.PropertyCategory", "property_category")
                        .WithMany("properties")
                        .HasForeignKey("category_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.City", "city")
                        .WithMany("properties")
                        .HasForeignKey("city_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataLayer.User", "user")
                        .WithMany("properties")
                        .HasForeignKey("owner_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.PropertySituation", "situation")
                        .WithMany("properties")
                        .HasForeignKey("situation_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("city");

                    b.Navigation("property_category");

                    b.Navigation("situation");

                    b.Navigation("user");
                });

            modelBuilder.Entity("DataLayer.PropertyFacilityProperty", b =>
                {
                    b.HasOne("DataLayer.PropertyFacility", "property_facility")
                        .WithMany("property_facility_properties")
                        .HasForeignKey("property_facility_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Property", "property")
                        .WithMany("property_facility_properties")
                        .HasForeignKey("property_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("property");

                    b.Navigation("property_facility");
                });

            modelBuilder.Entity("DataLayer.PropertyGallery", b =>
                {
                    b.HasOne("DataLayer.Property", "property")
                        .WithMany("gallery")
                        .HasForeignKey("property_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataLayer.User", "user")
                        .WithMany("propertie_galleries")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("property");

                    b.Navigation("user");
                });

            modelBuilder.Entity("DataLayer.Ticket", b =>
                {
                    b.HasOne("DataLayer.User", "user")
                        .WithMany("tickets")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("DataLayer.TicketReply", b =>
                {
                    b.HasOne("DataLayer.Ticket", "ticket")
                        .WithMany("replies")
                        .HasForeignKey("ticket_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.User", "user")
                        .WithMany("ticket_replies")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ticket");

                    b.Navigation("user");
                });

            modelBuilder.Entity("DataLayer.User", b =>
                {
                    b.HasOne("DataLayer.Agency", "agency")
                        .WithOne("user")
                        .HasForeignKey("DataLayer.User", "agency_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataLayer.Plan", "plan")
                        .WithMany("users")
                        .HasForeignKey("plan_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("agency");

                    b.Navigation("plan");
                });

            modelBuilder.Entity("DataLayer.UserRole", b =>
                {
                    b.HasOne("DataLayer.Role", "role")
                        .WithMany("user_roles")
                        .HasForeignKey("role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.User", "user")
                        .WithMany("user_roles")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("role");

                    b.Navigation("user");
                });

            modelBuilder.Entity("DataLayer.Agency", b =>
                {
                    b.Navigation("user")
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.BlogCategory", b =>
                {
                    b.Navigation("blogs");
                });

            modelBuilder.Entity("DataLayer.City", b =>
                {
                    b.Navigation("agency_list");

                    b.Navigation("properties");
                });

            modelBuilder.Entity("DataLayer.Plan", b =>
                {
                    b.Navigation("orders");

                    b.Navigation("users");
                });

            modelBuilder.Entity("DataLayer.Property", b =>
                {
                    b.Navigation("gallery");

                    b.Navigation("property_facility_properties");
                });

            modelBuilder.Entity("DataLayer.PropertyCategory", b =>
                {
                    b.Navigation("properties");
                });

            modelBuilder.Entity("DataLayer.PropertyFacility", b =>
                {
                    b.Navigation("property_facility_properties");
                });

            modelBuilder.Entity("DataLayer.PropertySituation", b =>
                {
                    b.Navigation("properties");
                });

            modelBuilder.Entity("DataLayer.Province", b =>
                {
                    b.Navigation("cities");
                });

            modelBuilder.Entity("DataLayer.Role", b =>
                {
                    b.Navigation("user_roles");
                });

            modelBuilder.Entity("DataLayer.Ticket", b =>
                {
                    b.Navigation("replies");
                });

            modelBuilder.Entity("DataLayer.User", b =>
                {
                    b.Navigation("propertie_galleries");

                    b.Navigation("properties");

                    b.Navigation("ticket_replies");

                    b.Navigation("tickets");

                    b.Navigation("user_roles");
                });
#pragma warning restore 612, 618
        }
    }
}
